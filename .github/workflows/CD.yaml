# CD交付流水线
#    - 部署到Github Pages
#    - 部署到Vercel托管平台
#    - 发布新的Github Release
# 参考资料：https://v2.vuepress.vuejs.org/zh/guide/deployment.html#github-pages

name: CD
on:
  push:
    branches:
      - next
      - refactor/deploy
  workflow_dispatch:

# 环境变量
env:
  # vercel
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # 部署到Github-Pages
  deploy-github:
    name: 部署到Github-Pages
    if: github.repository == '142vip/JavaScriptCollection'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          # “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录
          fetch-depth: 0

      # 安装PNPM
      - name: PNPM Install
        uses: pnpm/action-setup@v4
        with:
          version: 9.6.0

      # 安装Node环境
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.16.0
          # 淘宝镜像加速
          registry-url: 'https://registry.npmmirror.com'
          # 缓存
          cache: pnpm

      - name: Install Dependencies
        run: |
          ./scripts/ci

      # 编译 打包成dist
      - name: Build with VitePress
        run: pnpm build:docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vuepress/dist

      # 部署
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 部署到vercel平台
  #  deploy-vercel:
  #    name: "部署到Vercel平台"
  #    needs: install-init
  #    runs-on: ubuntu-latest
  #    if: github.repository == '142vip/JavaScriptCollection'
  #    steps:
  #      - name: Checkout Code
  #        uses: actions/checkout@v3
  #        with:
  #          fetch-depth: 0
  #
  #      - name: Restore Dependencies From Cache
  #        uses: actions/cache@v3
  #        with:
  #          path: |
  #            node_modules
  #          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
  #
  #      - name: Pull Vercel Environment Information
  #        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
  #
  #      ## 注意：安装pnpm
  #      - name: Build Project Artifacts
  #        run: npm i pnpm@7 -g && vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
  #
  #      - name: Deploy Project Artifacts to Vercel
  #        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # 版本发布
  release:
    name: 创建Github发布
    runs-on: ubuntu-latest
    # 主库next且执行release更新时执行
    if: github.repository == '142vip/JavaScriptCollection' && startsWith(github.event.head_commit.message, 'chore(release):')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          # “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录
          fetch-depth: 0

      # 安装PNPM
      - name: PNPM Install
        uses: pnpm/action-setup@v4
        with:
          version: 9.6.0

      # 安装Node环境
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.16.0
          # 淘宝镜像加速
          registry-url: 'https://registry.npmmirror.com'
          # 缓存
          cache: pnpm

      - name: Install Dependencies
        run: |
          ./scripts/ci

      # Github发布版本，并更新Release信息
      - name: Release New Version
        run: npx changelog
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

#  Deploy-ESC:
#    name: "部署到ESC服务器"
#    needs: install-init
#    runs-on: ubuntu-latest
#    ## 主库master、next且执行release更新时执行
#    if: github.repository == '142vip/JavaScriptCollection' && startsWith(github.event.head_commit.message, 'chore(release):')
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Get Current Version
#        id: version
#        uses: ashley-taylor/read-json-property-action@v1.0
#        with:
#          path: ./package.json
#          property: version
#
#        # 拉取镜像，更新服务
#      - name: Pull Image And Update ESC
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          port: ${{ secrets.SERVER_PORT }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          password: ${{ secrets.SERVER_PASSWORD }}
#          script: |
#            docker images
#            echo "-----------正在运行的服务--------"
#            docker ps
#            cd /service_env/ && git reset --hard && git pull origin main
#            bash ./scripts/book_doc.deploy.sh jsc ${{steps.version.outputs.value}}
