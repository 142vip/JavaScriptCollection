{"./":{"url":"./","title":"文档概述","keywords":"","body":"Node开发技术文档 文档概述 联系作者 基础篇 第一部分：Git概述 1.1 下载和安装 1.2 基本配置 1.3 常用命令 1.4 GitHub简单使用 1.5 GitBook简单使用 1.5.1 Typora简介 1.5.2 MarkDown语法 1.6 码云和GitHub的选择 第二部分：数据库概述 2.1 下载和安装 2.2 连接数据库 2.3 CURD操作 2.4 Redis缓存 2.4.1 redis安装 2.4.2 redis常用指令 2.5 可视化管理 入门篇 第一部分：Egg框架快速入门 1.1 基础功能 1.1.1 接口参数获取 1.1.2 Egg内置对象 1.1.3 Config配置 1.1.4 Egg生命周期 1.1.5 中间件理解 1.1.6 Router路由分发 1.1.7 Controller控制器 1.1.8 Service服务 1.1.9 常用插件 1.2 核心功能 1.2.1 日志输出 1.2.2 定时任务 1.2.2 HttpClient网络请求 1.2.3 Cookie的基本使用 1.2.4 Session的基本使用 1.2.5 统一异常-错误处理 1.2.6 CSRF防范和XSS攻击 1.2.7 RESTful API接口风格 第二部分：插件开发 2.1 egg-validate参数校验 2.2 egg-view-ejs页面渲染 2.3 egg-redis缓存 2.4 egg-mysql 2.5 egg-sequelize 2.6 egg-socket.io即时通讯 代码实战篇 第一部分：常用代码 1.1 图片前端在线剪辑 1.2 文件上传后台处理 1.3 MD5加密-解密算法 1.4 Egg Jwt加密和校验 第二部分：项目简介 2.1 基于OAuth2的统一认证中心系统 2.2 常用前后端分页比较与实现 2.3基于Spring Boot实现的个人博客 2.4 基于Yapi搭建的接口管理系统 2.5 GitBook开源笔记总结站点搭建 2.6 个人网站及接口服务搭建搭建 第三部分：手把手搭建基础Egg开发框架 # 友情链接 ​ 码云地址 ​ 笔者博客 ​ 联系作者 文档说明与维护 ​ 笔者目前是刚毕业大学生一枚,能力有限,只能谋求一份可以维持生计的工作,还需要更多的学习和总结;从刚开始接触Nodejs语言,到如今能够将其应用到实际项目中,发现整个过程需要使用到的知识点很多,需要注意和常用的开发知识自己也很容易忽略,于是就有了这份从基础到实战的《Node开发技术文档》,总结的难免不那么的尽善尽美,如若你与笔者一样,在开发中使用到这份文档,希望能够及时对文档中出现的问题进行issues交流学习. ​ 对于文档中未提及的知识,笔者有遇到会进行定期的维护总结,也欢迎大家来Pull request,提交自己的修改意见和文档总结. ​ 如果您是本书读者并手头宽裕，可以微信扫描下面二维码打赏，也不用太多，够买一杯咖啡就行。当然，如果您囊中羞涩，您也可以阅读本书，但我对您有个小小的要求，希望您在阅读的过程中能积极参与到本书的纠错以及未完成内容的创作上来，也算是有所付出; Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"CONTACT.html":{"url":"CONTACT.html","title":"联系作者","keywords":"","body":"联系作者 ​ 如果你在阅览《Node开发技术文档》的过程中遇到任何问题,欢迎您参与issues讨论,也可以直接联系笔者针对问题进行讨论、修改、优化,期待与您相遇.,也欢迎大家关注、Star、订阅留言. 联系方式 ​ 1.B站主页留言 ​ 2.Github主页issues讨论 ​ 3.码云主页讨论学习 ​ ​ 4.个人博客留言 ​ 5.笔者个人网站[目前暂未正常服务] Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-README.html":{"url":"git-README.html","title":"第一部分：Git概述","keywords":"","body":"第一部分：Git概述 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-download.html":{"url":"git-download.html","title":"1.1 下载和安装","keywords":"","body":"1.1 下载和安装 简介 ​ 先百度百科简介，对于Git工具的介绍可以帮助我们了解Git，特别是Git的基础读音； 下载 ​ 进入Git官网，可以快速的下载Git工具包 ​ 点击右下角的DownLoad下载最新版本2.24安装包； 安装 ​ 下载完成后，直接双击下载好的exe文件进行安装，具体步骤如下： 安装git时，要选择自定义安装路径 勾选生成git的桌面快捷方式。 其他全部默认选项安装。 ​ 可以看到上面有很多的组件，建议直接Next。 ​ Git的安装基本都是傻瓜式的，不涉及到任何稍显复杂的技术，可能有些人在安装软件的时候会可以避免安装在系统盘，笔者测试过Git安装在非系统盘的效果，使用起来非常的不流畅(也有可能是笔者的笔记本不太好)；总之Git的安装建议直接放在系统盘，本身Git整个软件包也不是很大.. ​ Git默认安装完成后，可以通过鼠标右键查看是否有Git Bash菜单栏或者桌面是否有Git图标来判断；或者直接在命令行界面来运行git --version来查看Git的版本，从而判断是否安装成功，效果如下： ​ 至此，Git成功安装，下一节开始基础的Git配置和简单使用 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-config.html":{"url":"git-config.html","title":"1.2 基本配置","keywords":"","body":"1.2 基本配置 基本配置信息 ​ 安装完Git后在系统的任意界面右键单击，选择Git Bash菜单栏运行Git 使用DNS命令git config --list查看全局的Git配置参数 当然也可以输入具体的配置名称来检测该配置是否是你预想的配置信息 # 检测配置信息中的用户名 git config user.name 当你在配置Git的信息的时候，以往Git指令，可以直接使用git help config来获取所有的config配置指令，浏览器就会出现如下的指令网页教程 配置个人信息 ​ 众所周知，Git和SVN一样都是优秀的版本控制工具，在多人的项目开发中，提供了很好的团队合作的协作方案。每个人都能够通过版本控制工具Git或者SVN来上传、检出项目代码，因此对于提交的信息，Git的开发人员在早期为了方便联系代码的提交/开发人员，因此在使用Git提交代码的时候需要在config里面配置个人信息 # 个人邮箱 git config --global user.email 'Taylor' # 开发人员的用户名信息 git config --global user.name '2237221210@qq.com' 注意： 在配置个人信息的时候，最后使用--global进行Git信息的全局配置，避免因为局部配置导致每次在使用Git提交代码的时候，都要重新配置user.name和user.email信息 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-dns.html":{"url":"git-dns.html","title":"1.3 常用命令","keywords":"","body":"1.3 常用命令 Git配置 $ git config --global user.name \"Your Name\" $ git config --global user.email \"email@example.com\" git config命令的--global参数，表明这台机器上的所有Git仓库都会使用这个配置，也可以对某个仓库指定不同的用户名和邮箱地址。 创建版本库 初始化一个Git仓库 $ git init 添加文件到Git仓库 包括两步： $ git add $ git commit -m \"description\" git add可以反复多次使用，添加多个文件，git commit可以一次提交很多文件，-m后面输入的是本次提交的说明，可以输入任意内容。 查看工作区状态 $ git status 查看修改内容 $ git diff $ git diff --cached $ git diff HEAD -- git diff 可以查看工作区(work dict)和暂存区(stage)的区别 git diff --cached 可以查看暂存区(stage)和分支(master)的区别 git diff HEAD -- 可以查看工作区和版本库里面最新版本的区别 查看提交日志 $ git log 简化日志输出信息 $ git log --pretty=oneline 查看命令历史 $ git reflog 版本回退 $ git reset --hard HEAD^ 以上命令是返回上一个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本是HEAD^^，往上100个版本写成HEAD~100。 回退指定版本号 $ git reset --hard commit_id commit_id是版本号，是一个用SHA1计算出的序列 工作区、暂存区和版本库 工作区：在电脑里能看到的目录； 版本库：在工作区有一个隐藏目录.git，是Git的版本库。 Git的版本库中存了很多东西，其中最重要的就是称为stage（或者称为index）的暂存区，还有Git自动创建的master，以及指向master的指针HEAD。 进一步解释一些命令： git add实际上是把文件添加到暂存区 git commit实际上是把暂存区的所有内容提交到当前分支撤销修改 丢弃工作区的修改 $ git checkout -- 该命令是指将文件在工作区的修改全部撤销，这里有两种情况： 一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次git commit或git add时的状态。 丢弃暂存区的修改 分两步： 第一步，把暂存区的修改撤销掉(unstage)，重新放回工作区： $ git reset HEAD 第二步，撤销工作区的修改 $ git checkout -- 小结： 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- 。 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD ，就回到了第一步，第二步按第一步操作。 已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，前提是没有推送到远程库。 删除文件 $ git rm git rm 相当于执行 $ rm $ git add 进一步的解释 Q：比如执行了rm text.txt 误删了怎么恢复？ A：执行git checkout -- text.txt 把版本库的东西重新写回工作区就行了 Q：如果执行了git rm text.txt我们会发现工作区的text.txt也删除了，怎么恢复？ A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区 $ git reset head text.txt $ git checkout -- text.txt Q：如果真的想从版本库里面删除文件怎么做？ A：执行git commit -m \"delete text.txt\"，提交后最新的版本库将不包含这个文件 远程仓库 创建SSH Key $ ssh-keygen -t rsa -C \"youremail@example.com\" 关联远程仓库 $ git remote add origin https://github.com/username/repositoryname.git 推送到远程仓库 $ git push -u origin master -u 表示第一次推送master分支的所有内容，此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。 从远程克隆 $ git clone https://github.com/usern/repositoryname.git 分支 创建分支 $ git branch 查看分支 $ git branch git branch命令会列出所有分支，当前分支前面会标一个*号。 切换分支 $ git checkout 创建+切换分支 $ git checkout -b 合并某分支到当前分支 $ git merge 删除分支 $ git branch -d 查看分支合并图 $ git log --graph 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用git log --graph命令可以看到分支合并图。 普通模式合并分支 $ git merge --no-ff -m \"description\" 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。合并分支时，加上--no-ff参数就可以用普通模式合并，能看出来曾经做过合并，包含作者和时间戳等信息，而fast forward合并就看不出来曾经做过合并。 保存工作现场 $ git stash 查看工作现场 $ git stash list 恢复工作现场 $ git stash pop 丢弃一个没有合并过的分支 $ git branch -D 查看远程库信息 $ git remote -v 在本地创建和远程分支对应的分支 $ git checkout -b branch-name origin/branch-name， 本地和远程分支的名称最好一致； 建立本地分支和远程分支的关联 $ git branch --set-upstream branch-name origin/branch-name； 从本地推送分支 $ git push origin branch-name 如果推送失败，先用git pull抓取远程的新提交； 从远程抓取分支 $ git pull 如果有冲突，要先处理冲突。 标签 tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。 新建一个标签 $ git tag 命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id。 指定标签信息 $ git tag -a -m or commit_id git tag -a -m \"blablabla...\"可以指定标签信息。 PGP签名标签 $ git tag -s -m or commit_id git tag -s -m \"blablabla...\"可以用PGP签名标签。 查看所有标签 $ git tag 推送一个本地标签 $ git push origin 推送全部未推送过的本地标签 $ git push origin --tags 删除一个本地标签 $ git tag -d 删除一个远程标签 $ git push origin :refs/tags/ Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-github.html":{"url":"git-github.html","title":"1.4 GitHub简单使用","keywords":"","body":"1.4 GitHub简单使用 初次遇见 ​ 当你第一次使用Github平台的时候，可以直接方位官方地址,该站点不在中国，目前国内可能只做了部分代理，因此站点访问可能会比较慢，懂得科学上网的，就可以很优雅和流畅的玩转Github，在Github上进行网上冲浪了。 ​ 对于未登录或者暂时没有Github账号的，可以在官网进行简单的预览学习和基础的搜索开源项目等功能，人性化的Github站点可能还会提醒你注册账号，更好的在该平台上进行代码交流； 注册/登录 ​ 废话不多说，点击官网上右上角的Sign up按钮，进行账号注册 ​ 老老实实的完成账号注册，并进行账号登录。目前笔者的Github主页如下 创建仓库 ​ 完成基本的账号注册和登录后，如果你需要将本地的项目代码提交的Github上方便管理，你首先是需要创建一个仓库repository。登录后直接点击右上角的+符号，选择New repository来创建代码仓库 ​ 当然，除了完成基础的项目仓库的信息填写，你还可以选择，你的仓库repository是公开；选择public的时候，意味着你的仓库代码全世界的每一个访问Github站点的用户都能看到你的代码提交记录，并且任意的pull或者issues，方便的项目更好的发展；选择private选项，顾名思义，你可以把你的代码仓库repository私有化，只有你登录后才能查看。 仓库设置 代码拉取 ​ 如果你在GitHub上发现比较好的开源项目或者想把自己的项目代码从GitHub上拉取下来，可以用git clone指令来获取；首先选取http或者ssl地址链接 ​ 在任意界面打开Git界面或者cmd界面，是使用如下命令 # 克隆远程项目 $ git clone XXXXXXXXXX.git(repository的https或者ssl地址) 代码提交 ​ 当前项目开发完成后，需要将本地的代码远程到github上，可以通过基本的Git指令来完成,具体步骤如下： 确保远程remote能够正常连接 # 连接远程地址 git remote add origin xxxxxx.git # 当仓库私有化的时候，只要确保的远程地址没有错误，在执行完上面的命令后，Git会自动调出Github的登录页面，只需要输入正确的登录口令(账号/密码)来确认身份即可； # 查看已连接的远程分支 git remote 初始化本地仓库 # 仓库初始化 git init # 提交文件 git add fileName.. # 对本次提交添加注释，并且提交到仓库回环中 git commit -m 'xxxxxxxxxxxxxx' 推送到远程仓库 # 推送到主分支master $ git push -u origin master 推送完成 当推送完成后，即可上Github官网个人主页仓库查看已推送的项目代码，可能项目在初始化的时候，会有ignore文件夹，因此Github可能有部分忽略的文件没有跟本地同步(往往是不重要的文件信息) 享受开源 ​ 学习到这里，你会可能刚开始第一次接触会比较陌生，笔者清楚的记得自己的大学毕业后第一次接触到Git，对于大部分的指令操作是不太适应的，但是当你使用主键熟练，你就会推翻自己之前的想法；可能这也就是接触新事物后的成长和收获吧，愿你能够很好的利用Github，类似的第三方代码管理工具还有开源中国、gitee等等。有空可以很好的了解下； ​ 关于Github的高级操作可以学习笔者前部分总结的Git指令，虽然不能细化到每一个知识角落，但是希望能过够帮助到你，更好的进行有效率的代码开发与项目实战； Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-gitbook.html":{"url":"git-gitbook.html","title":"1.5 GitBook简单使用","keywords":"","body":"1.5 GitBook简单使用 灵感来源 ​ 最近在看Flutter有关的文档知识，发现了原作者的文档除了知识点丰富外，文档整体简洁、美观、大方，于是带着学习的好奇心便很想知道该作者是怎么样搭建处理这样的一个知识笔记站点；查了一些资料后发现，存在着gitbook这样一个基于git和node的写书、做笔记工具，于是整理了一下； 官网及简介 ​ GitBook 是一个使用 Git 和 Markdown 来构建书籍的工具。它可以把你的书本生成为许多格式：PDF，ePub，mobi，或者成为一个网站。GitBook工具链是开源并且完全免费的，它的源码可以在 GitHub 上获取，也可以直接访问官网 GitBook进行学习、使用。 下载安装 1.安装NodeJs ​ 直接在百度node进入官网，下载适合系统的安装包，安装过程是傻瓜式安装，直接点击下一步就行； # 判断nodejs安装成功 $ node -v # nodejs自带npm包安装 $ npm -v 2.安装Git ​ 进入git官网选择适合自己系统的git版本进行下载，下载后依然是进行傻瓜式的安装； ​ git配置及常用指令总结，点击进入 3.全局安装 ​ 进入cmd终端，输入下面的命令来安装 GitBook。 $ npm install gitbook-cli -g ​ 安装完成之后，你可以使用下面的命令来检验是否安装成功【注意V大写】。 $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 创建图书 # 创建空白文件夹 $ mkdir test-gitbook # 初始化文件夹，创建目录 $ gitbook init ​ 在执行完创建指令后，并可以在文件夹中生成README.md和SUMMERY.md文件夹;执行gitbook build指令后会在书籍的文件夹中生成一个 _book 文件夹, 里面的内容即为生成的 html 文件，我们可以使用下面命令来生成网页而不开启服务器。 ​ 执行gitbook serve可以启动一个端口为400的本地服务器，相当于一个静态是web网站 ​ 直接访问http://localhost:4000就可以访问根据SUMMERY.md目录生成的静态资源网站，当然如果你有与服务器以及相对应的域名可以考虑利用gitbook来做笔记，并共享到自己的博客站点当中，也是很美妙的。 常用配置 具体的配置修改可以在book.json文件中进行修改，采用json数据的方式 常用命令 # 这里主要介绍一下 GitBook 的命令行工具 gitbook-cli 的一些命令, 首先说明两点: # gitbook-cli 和 gitbook 是两个软件 # gitbook-cli 会将下载的 gitbook 的不同版本放到 ~/.gitbook中, 可以通过设置GITBOOK_DIR环境变量来指# 定另外的文件夹 # 列出gitbook所有的命令 $ gitbook help # 输出gitbook-cli的帮助信息 $ gitbook --help # 生成静态网页 $ gitbook build # 生成静态网页并运行服务器 $ gitbook serve # 生成时指定gitbook的版本, 本地没有会先下载 $ gitbook build --gitbook=2.0.1 # 列出本地所有的gitbook版本 $ gitbook ls # 列出远程可用的gitbook版本 $ gitbook ls-remote # 安装对应的gitbook版本 $ gitbook fetch 标签/版本号 # 更新到gitbook的最新版本 $ gitbook update # 卸载对应的gitbook版本 $ gitbook uninstall 2.0.1 # 指定log的级别 $ gitbook build --log=debug # 输出错误信息 $ gitbook builid --debug 常用插件 Search Plus 支持中文搜索, 需要将默认的 search 和 lunr 插件去掉。 插件地址 { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } Advanced Emoji 支持emoji表情 emoij表情列表 插件地址 \"plugins\": [ \"advanced-emoji\" ] 使用示例： 😄 😆 😊 😃 ☺️ Github 添加github图标 插件地址 \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } Github Buttons 添加项目在 github 上的 star，watch，fork情况 插件地址 { \"plugins\": [ \"github-buttons\" ], \"pluginsConfig\": { \"github-buttons\": { \"repo\": \"zhangjikai/gitbook-use\", \"types\": [ \"star\", \"watch\", \"fork\" ], \"size\": \"small\" } } } Splitter 使侧边栏的宽度可以自由调节 插件地址 \"plugins\": [ \"splitter\" ] Sharing-plus 分享当前页面，比默认的 sharing 插件多了一些分享方式。 插件地址 plugins: [\"-sharing\", \"sharing-plus\"] 配置: \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": true, \"linkedin\": true, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": true, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"facebook\", \"google\", \"twitter\", \"weibo\", \"instapaper\", \"linkedin\", \"pocket\", \"stumbleupon\" ] } } Tbfed-pagefooter 为页面添加页脚 插件地址 \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy zhangjikai.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } Expandable-chapters-small 使左侧的章节目录可以折叠 插件地址 plugins: [\"expandable-chapters-small\"] Toggle-chapters 使左侧的章节目录可以折叠。相比expandable-chapters， 没有折叠箭头符号，并且当前只有一项可以展开。参考：https://blog.csdn.net/lintcgirl/article/details/54314113 插件地址 plugins: [\"toggle-chapters\"] GA Google 统计 插件地址 \"plugins\": [ \"ga\" ], \"pluginsConfig\": { \"ga\": { \"token\": \"UA-XXXX-Y\" } } 3-ba 百度统计 插件地址 { \"plugins\": [\"3-ba\"], \"pluginsConfig\": { \"3-ba\": { \"token\": \"xxxxxxxx\" } } } Donate 打赏插件 插件地址 \"plugins\": [ \"donate\" ], \"pluginsConfig\": { \"donate\": { \"wechat\": \"https://zhangjikai.com/resource/weixin.png\", \"alipay\": \"https://zhangjikai.com/resource/alipay.png\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } Local Video 使用Video.js 播放本地视频 插件地址 \"plugins\": [ \"local-video\" ] 使用示例：为了使视频可以自适应，我们指定视频的width为100%，并设置宽高比为16:9，如下面所示 {% raw %} To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video {% endraw %} 另外我们还要再配置下css，即在website.css中加入 .video-js { width:100%; height: 100%; } 自动生成本页的目录结构。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 插件地址 { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 使用方法: 在需要生成目录的地方加上 Edit Link 如果将 GitBook 的源文件保存到github或者其他的仓库上，使用该插件可以链接到当前页的源文件上。 插件地址 \"plugins\": [\"edit-link\"], \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/USER/REPO/edit/BRANCH\", \"label\": \"Edit This Page\" } } Favicon 更改网站的 favicon.ico 插件地址 { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\", \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } Todo 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type=checkbox]{ margin-left: -2em; } 插件地址 \"plugins\": [\"todo\"] 使用示例： write some articles drink a cup of tea Copy-code-button 为代码块添加复制的按钮。 插件地址 { \"plugins\": [\"copy-code-button\"] } Klipse 集成 Klipse (online code evaluator) 插件地址 Klipse { \"plugins\": [\"klipse\"] } klipse 目前支持下面的语言： javascript: evaluation is done with the javascript function eval and pretty printing of the result is done with pretty-format clojure[script]: evaluation is done with Self-Hosted Clojurescript ruby: evaluation is done with Opal C++: evaluation is done with JSCPP python: evaluation is done with Skulpt scheme: evaluation is done with BiwasScheme PHP: evaluation is done with Uniter BrainFuck JSX EcmaScript2017 Google Charts: See Interactive Business Report with Google Charts. 下面是一个使用示例： ​```eval-python print [x + 1 for x in range(10)] ​ 效果如下所示： print [x + 1 for x in range(10)] ## book.json常用配置 ```json { \"title\": \"Eggjs开发技术文档\", \"description\": \"好记性不如G笔记\", \"author\": \"Taylor\", \"output.name\": \"site\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.3\", \"root\": \".\", \"links\": { \"sidebar\": { \"首页\": \"http://www.142vip.cn\" } }, \"plugins\": [ \"code\", \"-lunr\", \"-search\", \"search-pro\", \"github\", \"splitter\", \"tbfed-pagefooter\", \"donate\", \"-sharing\", \"sharing-plus\", \"prism\", \"-highlight\", \"mermaid\", \"ancre-navigation\", \"chapter-fold\", \"hide-element\", \"insert-logo\", \"klipse\" ], \"pluginsConfig\": { \"insert-logo\": { \"url\": \"images/logo.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" }, \"hide-element\": { \"elements\": [\".gitbook-link\"] }, \"github\": { \"url\": \"https://github.com/lijiam\" }, \"code\": { \"copyButtons\": true }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright © Taylor 2019\", \"modify_label\": \"本书发布时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"donate\": { \"wechat\": \"./assets/wechat_like.jpg\", \"alipay\": \"./assets/wechat_like.jpg\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" }, \"sharing\": { \"facebook\": false, \"twitter\": false, \"weibo\": true, \"qq\": true, \"all\": [ \"douban\", \"google\", \"qzone\", \"linkedin\" ] }, \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ], \"lang\": { \"flow\": \"typescript\" } } } } Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-typora.html":{"url":"git-typora.html","title":"1.5.1 Typora简介","keywords":"","body":"1.5.1 Typora简介 Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。 Typora 一直是我认为桌面端笔记应用应有的终极形态。用我之前 一篇文章 中的话来说就是，「它的功能之强大、设计之冷静、体验之美妙、理念之先进，我认为值得所有笔记应用厂商学习。」 但一件很尴尬的事情是，由于它极简的设计理念，有许多使用者并没能完全地了解到 Typora 的全部强大功能。我想在这篇文章中由浅入深地介绍 Typora 的功能亮点。无论你从未用过 Typora，还是已经体验了很久，我相信你都能在这篇文章中发现 Typora 新的惊喜。 Typora 是什么 Typora 是一款支持实时预览的 Markdown 文本编辑器。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是完全免费的。 下载和安装 ​ 如果此时你已经有了使用Typora的冲动，那就一起来Typora官网进行学习、了解和使用吧。 ​ 在Typora官网进入DownLoad页面进行下载，安装包下载完成后就是简单的傻瓜式安装了。我想这部分应该都没有什么压力； 基本配置 ​ 软件安装完成后，就可以双击打开Typora软件进行使用了，在我对于Typora的使用感觉里，Typora有提供一些软件的基础设置，可以更好的使用软件进行笔记整理 外观 提供窗口样式、字体大小、状态栏、阅读速度、侧边栏以及软件主题设置； 编辑器 默认缩进、成对符号、即时渲染、复制行为等常规编辑设置 图像 这个设置我觉得非常重要，我之前写博客或者做笔记的时候难免需要使用到图片进行记录，Typora提供将图片放在指定的位置进行存储，可以有效的防止图片丢失或者显示不出来的问题，用户也可以很友好的进行笔记分享 Markdown 主要提供一些markdown的语法设置，关于markdown语法下一篇将着重介绍 主题设置 ​ Typora软件默认使用的是Github主题，如果你觉得不够友好可以在软件的左上方菜单栏里点击主题进行修改，大概有Github、Newsprint、Night、Pixyll、Whitey五个主题选择，对于大多数程序员简单的Github主题就已经够用，如果确实是不喜欢这些略显单调的主题，也可以在Typora官网进行主题下载，例如： 按照官网提示下载对应的主题包，进行使用； 快捷键使用 实际效果 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-markdown.html":{"url":"git-markdown.html","title":"1.5.2 MarkDown语法","keywords":"","body":"1.5.2 MarkDown语法 基础概要 ​ Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式，当你使用Markdown语法来进行学习笔记总结、算法梳理等文档编辑的时候，其简洁、快速、极客等优点就会越来越突出。本小节将主要围绕基础语法进行学习总结； 优点： 1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。 2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可 缺点： 1、需要记一些语法（当然，是很简单。五分钟学会）。 2、有些平台不支持Markdown编辑模式。 作为一个从事程序开发的工作人员，熟悉甚至熟练的使用Markdown语法是非常有必要的。 基础语法 斜体和粗体 代码： *斜体*或_斜体_ **粗体** ***加粗斜体*** ~~删除线~~ 显示效果： 这是一段斜体 这是一段粗体 这是一段加粗斜体 这是一段删除线 分级标题 第一种写法： 这是一个一级标题 ============================ 这是一个二级标题 -------------------------------------------------- 第二种写法： # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 由于用了[TOC]标记编辑器会把所有标题写到目录大纲中，在这里写的演示标题也会列进去，所以就不演示了。同学们自己在编辑器中观察，很简单，一级标题字号最大，依级递减。（注：简书Markdown不支持目录功能） 超链接 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。 行内式 语法说明： []里写链接文字，()里写链接地址, ()中的\"\"中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接文字这样的形式。链接地址与链接标题前有一个空格。 参考式 参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。 语法说明： 参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 \"链接标题\"，链接地址与链接标题前有一个空格。 如果链接文字本身可以做为链接标记，你也可以写成[链接文字][] [链接文字]：链接地址的形式，见代码的最后一行。 代码： 我经常去的几个网站[GitHub][1]、[知乎][2]以及[简书][3] [简书][3]是一个不错的[写作社区][]。 [1]:https://github.com \"GitHub\" [2]:https://www.zhihu.com \"知乎\" [3]:http://www.jianshu.com \"简书\" [写作社区]:http://www.jianshu.com 显示效果： 我经常去的几个网站GitHub、知乎等 自动链接 语法说明： Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用<>;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 代码： 显示效果： http://example.com/ address@example.com 锚点 网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。 注意： Markdown Extra 只支持在标题后插入锚点，其它地方无效。 语法描述： 在你准备跳转到的指定标题后插入锚点{#标记}，然后在文档的其它地方写上连接到锚点的链接。 代码： ## 0. 目录{#index} 跳转到[目录](#index) 显示效果： 跳转到目录 列表 无序列表 使用 *，+，- 表示无序列表。 代码： - 无序列表项 一 - 无序列表项 二 - 无序列表项 三 显示效果： 无序列表项 一 无序列表项 二 无序列表项 三 有序列表 有序列表则使用数字接着一个英文句点。 代码： 1. 有序列表项 一 2. 有序列表项 二 3. 有序列表项 三 显示效果： 有序列表项 一 有序列表项 二 有序列表项 三 定义型列表 语法说明： 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab) 代码： Markdown : 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格） 代码块 2 : 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） 显示效果： Markdown : 轻量级文本标记语言，可以转换成html，pdf等格式 代码块 2 : 这是代码块的定义 代码块（左侧有八个不可见的空格） 列表缩进 语法说明： 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好（显示效果与代码一致）： 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 但是如果你懒，那也行： 代码： * 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ * 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 显示效果： 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 包含段落的列表 语法说明： 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）： 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许： 代码： * 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ * 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 显示效果： 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 包含引用的列表 语法说明： 如果要在列表项目内放进引用，那 > 就需要缩进： 代码： * 阅读的方法: > 打开书本。 > 打开电灯。 显示效果： 阅读的方法: 打开书本。 打开电灯。 包含代码区块的引用 语法说明： 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符： 一列表项包含一个列表区块： 特殊情况 在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法： 1986. What a great season. 会显示成： What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠： 1986\\. What a great season. 会显示成： \\1986. What a great season. 引用 语法说明： 引用需要在被引用的文本前加上>符号。 代码： > 这是一个有两段文字的引用, >无意义的占行文字1. >无意义的占行文字2. > >无意义的占行文字3. >无意义的占行文字4. 显示效果： 这是一个有两段文字的引用, 无意义的占行文字1. 无意义的占行文字2. 无意义的占行文字3. 无意义的占行文字4. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 >： 代码： > 这是一个有两段文字的引用, 无意义的占行文字1. 无意义的占行文字2. >无意义的占行文字3. 无意义的占行文字4. 显示效果： 这是一个有两段文字的引用, 无意义的占行文字1. 无意义的占行文字2. 无意义的占行文字3. 无意义的占行文字4. 引用的多层嵌套 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 >： 代码： >>> 请问 Markdwon 怎么用？ - 小白 >>自己看教程！ - 愤青 >教程在哪？ - 小白 显示效果： 请问 Markdwon 怎么用？ - 小白 自己看教程！ - 愤青 教程在哪？ - 小白 引用其它要素 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 代码： > 1. 这是第一行列表项。 > 2. 这是第二行列表项。 > > 给出一些例子代码： > > return shell_exec(\"echo $input | $markdown_script\"); 显示效果： 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(\"echo $input | $markdown_script\"); 插入图像 图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。 语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。 行内式 语法说明： 代码： 快乐学习： ![快乐学习](http://upload-images.jianshu.io/upload_images/1001659-7535c9e3fe16240d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"快乐学习\") 显示效果： 快乐学习： 快乐学习 参考式 语法说明： 在文档要插入图片的地方写![图片Alt][标记] 在文档的最后写上[标记]:图片地址 \"Title\" 代码： 快乐学习： ![快乐学习][study] [study]:http://upload-images.jianshu.io/upload_images/1001659-7535c9e3fe16240d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"快乐学习\" 显示效果： 快乐学习： 快乐学习 注脚 语法说明： 在需要添加注脚的文字后加上脚注[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。 代码： 使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用简书或者支持Markdown的编辑器进行书写。 [^1]:Markdown是一种纯文本标记语言 [^2]:HyperText Markup Language 超文本标记语言 显示效果： 使用 Markdown[1]可以效率的书写文档, 直接转换成 HTML[2], 你可以使用简书或者支持Markdown的编辑器进行书写。 注：脚注自动被搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转回到加注的地方。 数学公式 $ 表示行内公式 代码： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 显示效果： 质能守恒方程可以用一个很简洁的方程式 来表达。 $$ 表示整行公式 代码： $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}$$ 显示效果： %20%3D%20x1%5E2%20%2B%20x_2%5E2%20%2B%20%5Ccdots%20%2B%20x_n%5E2) ![\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}](https://math.jianshu.com/math?formula=%5Csum%5E%7Bj-1%7D%7Bk%3D0%7D%7B%5Cwidehat%7B%5Cgamma%7D_%7Bkj%7D%20z_k%7D) 访问 MathJax 参考更多使用方法。 表格 语法说明： 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。 代码： 简单方式写表格： 学号|姓名|分数 -|-|- 小明|男|75 小红|女|79 小陆|男|92 原生方式写表格： |学号|姓名|分数| |-|-|-| |小明|男|75| |小红|女|79| |小陆|男|92| 为表格第二列指定方向： 产品|价格 -|-: Leanote 高级账号|60元/年 Leanote 超级账号|120元/年 显示效果： 简单方式写表格： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 原生方式写表格： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 为表格第二列指定方向： 产品 价格 为知笔记VIP 60元/年 有道云笔记会员 198元/年 分隔线 你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 代码： * * * *** ***** - - - --------------------------------------- 显示效果都一样： 代码 对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用“`”符号（一般在ESC键下方）包裹代码。 语法说明： 插入行内代码，即插入一个单词或者一句代码的情况，使用code这样的形式插入。 插入多行代码，可以使用缩进或者code,具体看示例。 注意： 缩进式插入前方必须有空行 行内式 代码： C语言里的函数 `scanf()` 怎么使用？ 显示效果： C语言里的函数 scanf() 怎么使用？ 缩进式多行代码 缩进 4 个空格或是 1 个制表符 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 代码： #include int main(void) { printf(\"Hello world\\n\"); } 显示效果： #include int main(void) { printf(\"Hello world\\n\"); } 用六个`包裹多行代码 代码： ``` #include int main(void) { printf(\"Hello world\\n\"); } ``` 显示效果： #include int main(void) { printf(\"Hello world\\n\"); } 代码高亮 代码高亮示例: /** * nth element in the fibonacci series. * @param n >= 0 * @return the nth element, >= 0. */ function fib(n) { var a = 1, b = 1; var tmp; while (--n >= 0) { tmp = a; a += b; b = tmp; } return a; } document.write(fib(10)); class Employee: empCount = 0 def __init__(self, name, salary): self.name = name self.salary = salary Employee.empCount += 1 高级语法 时序图 时序图语法 代码： ```sequence participant 客户端 as A participant 服务端 as B participant 通行证中心 as C Note over A:用户输入通行证账号、密码 A->C: 发送账号、密码 Note over C:验证账号、密码 C-->>A:返回token A->B:发送token B->C:验证token C-->>B:验证成功 B-->>A:登陆成功 Note left of A:左边注释 B->B:自交互 Note right of C:右边注释 ``` 效果： 时序图 流程图 流程图语法 ```flow st=>start: 开始 io=>inputoutput: 验证 op=>operation: 选项 cond=>condition: 是 或 否？ sub=>subroutine: 子程序 e=>end: 结束 st->io->op->cond cond(yes)->e cond(no)->sub->io ``` 效果： 流程图 甘特图 甘特图语法 ``` gantt dateFormat YYYY-MM-DD title 产品计划表 section 初期阶段 明确需求: 2017-03-01, 10d section 中期阶段 跟进开发: 2017-03-11, 9d section 后期阶段 抽查测试: 2017-03-20, 9d ``` 效果： 后记 ​ 目前笔者了解学习到的常用的Markdown语法大致就这么一些，具体的还有很多细节和其他语法属性由于篇幅原因很难全部总结出来，读者在阅读这节文档的同时，可以通过Baidu等搜索软件来更多的了解学习Markdown的基础语法，在后续的开发学习中提高工作效率。当然对于一个程序员来说，要记住这么多属性、语法确实很难，除了常用便只有熟能生巧了，也可以借助一些常用的支持Markdown语法的编辑工具。例如上一节的Typora编辑工具，目前笔者用的是Typora，各位如果有什么好的建议和推荐，可以联系笔者进行讨论学习，下节见~ Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-choice.html":{"url":"git-choice.html","title":"1.6 码云和GitHub的选择","keywords":"","body":"1.6 码云和GitHub的选择 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"mysql-README.html":{"url":"mysql-README.html","title":"第二部分：数据库概述","keywords":"","body":"第二部分：数据库概述 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"mysql-download.html":{"url":"mysql-download.html","title":"2.1 下载和安装","keywords":"","body":"2.1 下载和安装 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"git-connect.html":{"url":"git-connect.html","title":"2.2 连接数据库","keywords":"","body":"2.2 连接数据库 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"mysql-curd.html":{"url":"mysql-curd.html","title":"2.3 CURD操作","keywords":"","body":"2.3 CURD操作 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"mysql-redis.html":{"url":"mysql-redis.html","title":"2.4 Redis缓存","keywords":"","body":"2.4 Redis缓存 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"mysql-redis-install.html":{"url":"mysql-redis-install.html","title":"2.4.1 redis安装","keywords":"","body":"2.4.1 redis安装 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"mysql-redis-dns.html":{"url":"mysql-redis-dns.html","title":"2.4.2 redis常用指令","keywords":"","body":"2.4.2 redis常用指令 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"mysql-redis-view.html":{"url":"mysql-redis-view.html","title":"2.5 可视化管理","keywords":"","body":"2.5 可视化管理 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-README.html":{"url":"egg-README.html","title":"第一部分：Egg框架快速入门","keywords":"","body":"第一部分：Egg框架快速入门 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-base.html":{"url":"egg-base.html","title":"1.1 基础功能","keywords":"","body":"1.1 基础功能 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-request-params.html":{"url":"egg-request-params.html","title":"1.1.1 接口参数获取","keywords":"","body":"1.1.1 接口参数获取 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-object.html":{"url":"egg-object.html","title":"1.1.2 Egg内置对象 ","keywords":"","body":"1.1.2 Egg内置对象 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-config.html":{"url":"egg-config.html","title":"1.1.3 Config配置","keywords":"","body":"1.1.3 Config配置 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-life.html":{"url":"egg-life.html","title":"1.1.4 Egg生命周期","keywords":"","body":"1.1.4 Egg生命周期 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-middleware.html":{"url":"egg-middleware.html","title":"1.1.5 中间件理解","keywords":"","body":"1.1.5 中间件理解 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-router.html":{"url":"egg-router.html","title":"1.1.6 Router路由分发","keywords":"","body":"1.1.6 Router路由分发 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-controller.html":{"url":"egg-controller.html","title":"1.1.7 Controller控制器","keywords":"","body":"1.1.7 Controller控制器 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-service.html":{"url":"egg-service.html","title":"1.1.8 Service服务","keywords":"","body":"1.1.8 Service服务 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-plugin.html":{"url":"egg-plugin.html","title":"1.1.9 常用插件","keywords":"","body":"1.1.9 常用插件 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-core.html":{"url":"egg-core.html","title":"1.2 核心功能","keywords":"","body":"1.2 核心功能 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-logger.html":{"url":"egg-logger.html","title":"1.2.1 日志输出","keywords":"","body":"1.2.1 日志输出 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-schedule.html":{"url":"egg-schedule.html","title":"1.2.2 定时任务","keywords":"","body":"1.2.2 定时任务 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-httpclient.html":{"url":"egg-httpclient.html","title":"1.2.2 HttpClient网络请求","keywords":"","body":"1.2.2 HttpClient网络请求 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-cookies.html":{"url":"egg-cookies.html","title":"1.2.3 Cookie的基本使用","keywords":"","body":"1.2.3 Cookie的基本使用 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-session.html":{"url":"egg-session.html","title":"1.2.4 Session的基本使用","keywords":"","body":"1.2.4 Session的基本使用 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-try-catch.html":{"url":"egg-try-catch.html","title":"1.2.5 统一异常-错误处理","keywords":"","body":"1.2.5 统一异常-错误处理 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-csrf-xss.html":{"url":"egg-csrf-xss.html","title":"1.2.6 CSRF防范和XSS攻击","keywords":"","body":"1.2.6 CSRF防范和XSS攻击 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-restful.html":{"url":"egg-restful.html","title":"1.2.7 RESTful API接口风格","keywords":"","body":"1.2.7 RESTful API接口风格 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-README.html":{"url":"plugin-README.html","title":"第二部分：插件开发","keywords":"","body":"第二部分：插件开发 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-egg-validate.html":{"url":"plugin-egg-validate.html","title":"2.1 egg-validate参数校验","keywords":"","body":"2.1 egg-validate参数校验 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-egg-view.ejs.html":{"url":"plugin-egg-view.ejs.html","title":"2.2 egg-view-ejs页面渲染","keywords":"","body":"2.2 egg-view-ejs页面渲染 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-egg-redis.html":{"url":"plugin-egg-redis.html","title":"2.3 egg-redis缓存","keywords":"","body":"2.3 egg-redis缓存 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-egg-mysql.html":{"url":"plugin-egg-mysql.html","title":"2.4 egg-mysql","keywords":"","body":"2.4 egg-mysql Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-egg-axios-plus.html":{"url":"plugin-egg-axios-plus.html","title":"2.5 egg-axios-plus","keywords":"","body":"2.5 egg-sequelize Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-egg-sequelize.html":{"url":"plugin-egg-sequelize.html","title":"2.6 egg-sequelize","keywords":"","body":"2.5 egg-sequelize Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-egg-sequelize-plus.html":{"url":"plugin-egg-sequelize-plus.html","title":"2.7 egg-sequelize-plus","keywords":"","body":"2.5 egg-sequelize Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"plugin-egg-socket.io.html":{"url":"plugin-egg-socket.io.html","title":"2.8 egg-socket.io即时通讯","keywords":"","body":"2.6 egg-socket.io即时通讯 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-README-CODE.html":{"url":"project-README-CODE.html","title":"第一部分：常用代码","keywords":"","body":"第一部分：常用代码 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-images-cropper.html":{"url":"project-images-cropper.html","title":"1.1 图片前端在线剪辑","keywords":"","body":"1.1 图片前端在线剪辑 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-upload.html":{"url":"project-upload.html","title":"1.2 文件上传后台处理","keywords":"","body":"1.2 文件上传后台处理 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-md5.html":{"url":"project-md5.html","title":"1.3 MD5加密-解密算法","keywords":"","body":"1.3 MD5加密-解密算法 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-token.html":{"url":"project-token.html","title":"1.4 Egg Jwt加密和校验","keywords":"","body":"1.4 Egg Jwt加密和校验 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-README-INTRODUCE.html":{"url":"project-README-INTRODUCE.html","title":"第二部分：项目简介","keywords":"","body":"第二部分：项目简介 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-ssoCenterSystem.html":{"url":"project-ssoCenterSystem.html","title":"2.1 基于OAuth2的统一认证中心系统","keywords":"","body":"2.1 基于OAuth2的统一认证中心系统 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-pagenation.html":{"url":"project-pagenation.html","title":"2.2 常用前后端分页比较与实现","keywords":"","body":"2.2 常用前后端分页比较与实现 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-spring-boot-blog.html":{"url":"project-spring-boot-blog.html","title":"2.3基于Spring Boot实现的个人博客","keywords":"","body":"2.3基于Spring Boot实现的个人博客 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-webapi.html":{"url":"project-webapi.html","title":"2.4 基于Yapi搭建的接口管理系统","keywords":"","body":"2.4 基于Yapi搭建的接口管理系统 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-gitbook.html":{"url":"project-gitbook.html","title":"2.5 GitBook开源笔记总结站点搭建","keywords":"","body":"2.5 GitBook开源笔记总结站点搭建 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"project-142vip.cn.html":{"url":"project-142vip.cn.html","title":"2.6 个人网站及接口服务搭建搭建","keywords":"","body":"2.6 个人网站及接口服务搭建搭建 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "},"egg-egg-example.html":{"url":"egg-egg-example.html","title":"第三部分：手把手搭建基础Egg开发框架","keywords":"","body":"第三部分：手把手搭建基础Egg开发框架 Copyright © Taylor 2019 all right reserved，powered by Gitbook本书最近修改时间： 2019-11-24 16:18:22 "}}